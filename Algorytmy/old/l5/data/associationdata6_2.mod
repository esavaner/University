param n, integer, >= 1; #

set V, default {0..n-1}; #

set E, within V cross V;

param capacity{(i,j) in E}, >= 0;

param source, symbolic, in V, default 0;

param sink, symbolic, in V, != source, default n-1;

var flow{(i,j) in E}, >= 0, <= capacity[i,j];

var maxFlow, >= 0;

s.t. condition_1{i in V: i<>source and i<>sink}:
   sum{(j,i) in E} flow[j,i] = sum{(i,j) in E} flow[i,j];
   
s.t. condition_2{i in V: i=source}:
   maxFlow = sum{(i,j) in E} flow[i,j];
   
s.t. condition_3{i in V: i=sink}:
   maxFlow = sum{(j,i) in E} flow[j,i] ;

maximize obj: maxFlow;

solve;

printf "Maximum flow: %s\n", maxFlow;

data;
param n := 130;
param : E :   capacity :=
0 1 1
0 2 1
0 3 1
0 4 1
0 5 1
0 6 1
0 7 1
0 8 1
0 9 1
0 10 1
0 11 1
0 12 1
0 13 1
0 14 1
0 15 1
0 16 1
0 17 1
0 18 1
0 19 1
0 20 1
0 21 1
0 22 1
0 23 1
0 24 1
0 25 1
0 26 1
0 27 1
0 28 1
0 29 1
0 30 1
0 31 1
0 32 1
0 33 1
0 34 1
0 35 1
0 36 1
0 37 1
0 38 1
0 39 1
0 40 1
0 41 1
0 42 1
0 43 1
0 44 1
0 45 1
0 46 1
0 47 1
0 48 1
0 49 1
0 50 1
0 51 1
0 52 1
0 53 1
0 54 1
0 55 1
0 56 1
0 57 1
0 58 1
0 59 1
0 60 1
0 61 1
0 62 1
0 63 1
0 64 1
1 70 1
1 113 1
2 101 1
2 115 1
3 65 1
3 122 1
4 109 1
4 72 1
5 71 1
5 80 1
6 93 1
6 109 1
7 117 1
7 95 1
8 82 1
8 72 1
9 87 1
9 78 1
10 93 1
10 109 1
11 121 1
11 112 1
12 125 1
12 65 1
13 84 1
13 94 1
14 126 1
14 101 1
15 121 1
15 124 1
16 101 1
16 71 1
17 92 1
17 82 1
18 68 1
18 81 1
19 116 1
19 112 1
20 81 1
20 77 1
21 110 1
21 93 1
22 89 1
22 84 1
23 78 1
23 79 1
24 80 1
24 125 1
25 124 1
25 65 1
26 87 1
26 111 1
27 80 1
27 70 1
28 83 1
28 114 1
29 85 1
29 120 1
30 105 1
30 80 1
31 117 1
31 92 1
32 104 1
32 74 1
33 72 1
33 112 1
34 74 1
34 115 1
35 112 1
35 114 1
36 78 1
36 73 1
37 84 1
37 73 1
38 122 1
38 97 1
39 128 1
39 109 1
40 75 1
40 73 1
41 106 1
41 126 1
42 115 1
42 108 1
43 121 1
43 77 1
44 71 1
44 72 1
45 117 1
45 121 1
46 113 1
46 84 1
47 78 1
47 91 1
48 128 1
48 65 1
49 97 1
49 93 1
50 124 1
50 99 1
51 90 1
51 86 1
52 70 1
52 76 1
53 110 1
53 107 1
54 81 1
54 107 1
55 69 1
55 67 1
56 80 1
56 66 1
57 96 1
57 125 1
58 75 1
58 107 1
59 128 1
59 74 1
60 95 1
60 86 1
61 86 1
61 92 1
62 96 1
62 91 1
63 97 1
63 74 1
64 71 1
64 101 1
65 129 1
66 129 1
67 129 1
68 129 1
69 129 1
70 129 1
71 129 1
72 129 1
73 129 1
74 129 1
75 129 1
76 129 1
77 129 1
78 129 1
79 129 1
80 129 1
81 129 1
82 129 1
83 129 1
84 129 1
85 129 1
86 129 1
87 129 1
88 129 1
89 129 1
90 129 1
91 129 1
92 129 1
93 129 1
94 129 1
95 129 1
96 129 1
97 129 1
98 129 1
99 129 1
100 129 1
101 129 1
102 129 1
103 129 1
104 129 1
105 129 1
106 129 1
107 129 1
108 129 1
109 129 1
110 129 1
111 129 1
112 129 1
113 129 1
114 129 1
115 129 1
116 129 1
117 129 1
118 129 1
119 129 1
120 129 1
121 129 1
122 129 1
123 129 1
124 129 1
125 129 1
126 129 1
127 129 1
128 129 1
;
end;
