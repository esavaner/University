param n, integer, >= 1; #

set V, default {0..n-1}; #

set E, within V cross V;

param capacity{(i,j) in E}, >= 0;

param source, symbolic, in V, default 0;

param sink, symbolic, in V, != source, default n-1;

var flow{(i,j) in E}, >= 0, <= capacity[i,j];

var maxFlow, >= 0;

s.t. condition_1{i in V: i<>source and i<>sink}:
   sum{(j,i) in E} flow[j,i] = sum{(i,j) in E} flow[i,j];
   
s.t. condition_2{i in V: i=source}:
   maxFlow = sum{(i,j) in E} flow[i,j];
   
s.t. condition_3{i in V: i=sink}:
   maxFlow = sum{(j,i) in E} flow[j,i] ;

maximize obj: maxFlow;

solve;

printf "Maximum flow: %s\n", maxFlow;

data;
param n := 130;
param : E :   capacity :=
0 1 1
0 2 1
0 3 1
0 4 1
0 5 1
0 6 1
0 7 1
0 8 1
0 9 1
0 10 1
0 11 1
0 12 1
0 13 1
0 14 1
0 15 1
0 16 1
0 17 1
0 18 1
0 19 1
0 20 1
0 21 1
0 22 1
0 23 1
0 24 1
0 25 1
0 26 1
0 27 1
0 28 1
0 29 1
0 30 1
0 31 1
0 32 1
0 33 1
0 34 1
0 35 1
0 36 1
0 37 1
0 38 1
0 39 1
0 40 1
0 41 1
0 42 1
0 43 1
0 44 1
0 45 1
0 46 1
0 47 1
0 48 1
0 49 1
0 50 1
0 51 1
0 52 1
0 53 1
0 54 1
0 55 1
0 56 1
0 57 1
0 58 1
0 59 1
0 60 1
0 61 1
0 62 1
0 63 1
0 64 1
1 74 1
1 119 1
1 85 1
1 105 1
2 116 1
2 80 1
2 89 1
2 100 1
3 82 1
3 70 1
3 81 1
3 120 1
4 74 1
4 79 1
4 100 1
4 73 1
5 66 1
5 107 1
5 90 1
5 68 1
6 110 1
6 98 1
6 73 1
6 82 1
7 82 1
7 93 1
7 120 1
7 75 1
8 121 1
8 87 1
8 105 1
8 69 1
9 110 1
9 111 1
9 121 1
9 90 1
10 68 1
10 103 1
10 82 1
10 105 1
11 113 1
11 94 1
11 111 1
11 73 1
12 118 1
12 87 1
12 109 1
12 111 1
13 80 1
13 104 1
13 117 1
13 125 1
14 87 1
14 118 1
14 85 1
14 91 1
15 92 1
15 78 1
15 71 1
15 124 1
16 120 1
16 93 1
16 72 1
16 121 1
17 70 1
17 66 1
17 118 1
17 109 1
18 123 1
18 103 1
18 86 1
18 66 1
19 74 1
19 100 1
19 87 1
19 91 1
20 96 1
20 101 1
20 76 1
20 110 1
21 80 1
21 109 1
21 105 1
21 76 1
22 104 1
22 90 1
22 98 1
22 72 1
23 65 1
23 122 1
23 128 1
23 116 1
24 125 1
24 127 1
24 94 1
24 118 1
25 75 1
25 112 1
25 66 1
25 107 1
26 85 1
26 100 1
26 127 1
26 87 1
27 96 1
27 112 1
27 80 1
27 124 1
28 80 1
28 120 1
28 86 1
28 89 1
29 120 1
29 90 1
29 105 1
29 85 1
30 81 1
30 116 1
30 110 1
30 77 1
31 123 1
31 126 1
31 70 1
31 87 1
32 118 1
32 82 1
32 72 1
32 66 1
33 112 1
33 124 1
33 86 1
33 123 1
34 108 1
34 113 1
34 112 1
34 88 1
35 75 1
35 115 1
35 67 1
35 126 1
36 104 1
36 65 1
36 76 1
36 74 1
37 93 1
37 112 1
37 110 1
37 98 1
38 100 1
38 112 1
38 116 1
38 106 1
39 124 1
39 73 1
39 87 1
39 100 1
40 109 1
40 83 1
40 71 1
40 92 1
41 95 1
41 103 1
41 78 1
41 102 1
42 111 1
42 83 1
42 121 1
42 91 1
43 68 1
43 81 1
43 95 1
43 119 1
44 101 1
44 113 1
44 89 1
44 92 1
45 84 1
45 116 1
45 68 1
45 127 1
46 108 1
46 79 1
46 117 1
46 82 1
47 73 1
47 69 1
47 75 1
47 110 1
48 76 1
48 98 1
48 117 1
48 70 1
49 78 1
49 77 1
49 124 1
49 117 1
50 72 1
50 69 1
50 94 1
50 89 1
51 68 1
51 79 1
51 120 1
51 81 1
52 82 1
52 89 1
52 79 1
52 95 1
53 72 1
53 123 1
53 73 1
53 74 1
54 67 1
54 86 1
54 111 1
54 126 1
55 115 1
55 69 1
55 125 1
55 104 1
56 121 1
56 85 1
56 84 1
56 102 1
57 85 1
57 72 1
57 74 1
57 99 1
58 73 1
58 111 1
58 112 1
58 88 1
59 115 1
59 65 1
59 123 1
59 91 1
60 121 1
60 116 1
60 110 1
60 125 1
61 94 1
61 102 1
61 122 1
61 91 1
62 120 1
62 66 1
62 99 1
62 112 1
63 110 1
63 82 1
63 89 1
63 70 1
64 126 1
64 101 1
64 121 1
64 106 1
65 129 1
66 129 1
67 129 1
68 129 1
69 129 1
70 129 1
71 129 1
72 129 1
73 129 1
74 129 1
75 129 1
76 129 1
77 129 1
78 129 1
79 129 1
80 129 1
81 129 1
82 129 1
83 129 1
84 129 1
85 129 1
86 129 1
87 129 1
88 129 1
89 129 1
90 129 1
91 129 1
92 129 1
93 129 1
94 129 1
95 129 1
96 129 1
97 129 1
98 129 1
99 129 1
100 129 1
101 129 1
102 129 1
103 129 1
104 129 1
105 129 1
106 129 1
107 129 1
108 129 1
109 129 1
110 129 1
111 129 1
112 129 1
113 129 1
114 129 1
115 129 1
116 129 1
117 129 1
118 129 1
119 129 1
120 129 1
121 129 1
122 129 1
123 129 1
124 129 1
125 129 1
126 129 1
127 129 1
128 129 1
;
end;
