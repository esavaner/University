param n, integer, >= 1; #

set V, default {0..n-1}; #

set E, within V cross V;

param capacity{(i,j) in E}, >= 0;

param source, symbolic, in V, default 0;

param sink, symbolic, in V, != source, default n-1;

var flow{(i,j) in E}, >= 0, <= capacity[i,j];

var maxFlow, >= 0;

s.t. condition_1{i in V: i<>source and i<>sink}:
   sum{(j,i) in E} flow[j,i] = sum{(i,j) in E} flow[i,j];
   
s.t. condition_2{i in V: i=source}:
   maxFlow = sum{(i,j) in E} flow[i,j];
   
s.t. condition_3{i in V: i=sink}:
   maxFlow = sum{(j,i) in E} flow[j,i] ;

maximize obj: maxFlow;

solve;

printf "Maximum flow: %s\n", maxFlow;

data;
param n := 66;
param : E :   capacity :=
0 1 1
0 2 1
0 3 1
0 4 1
0 5 1
0 6 1
0 7 1
0 8 1
0 9 1
0 10 1
0 11 1
0 12 1
0 13 1
0 14 1
0 15 1
0 16 1
0 17 1
0 18 1
0 19 1
0 20 1
0 21 1
0 22 1
0 23 1
0 24 1
0 25 1
0 26 1
0 27 1
0 28 1
0 29 1
0 30 1
0 31 1
0 32 1
1 54 1
1 63 1
1 41 1
2 57 1
2 56 1
2 41 1
3 51 1
3 34 1
3 40 1
4 52 1
4 61 1
4 55 1
5 37 1
5 47 1
5 48 1
6 42 1
6 53 1
6 50 1
7 62 1
7 38 1
7 33 1
8 62 1
8 50 1
8 63 1
9 35 1
9 58 1
9 55 1
10 53 1
10 54 1
10 42 1
11 49 1
11 55 1
11 41 1
12 39 1
12 50 1
12 33 1
13 62 1
13 50 1
13 57 1
14 45 1
14 56 1
14 54 1
15 41 1
15 44 1
15 43 1
16 33 1
16 58 1
16 50 1
17 36 1
17 60 1
17 49 1
18 52 1
18 59 1
18 38 1
19 53 1
19 42 1
19 34 1
20 38 1
20 51 1
20 52 1
21 49 1
21 64 1
21 33 1
22 57 1
22 45 1
22 51 1
23 64 1
23 57 1
23 63 1
24 39 1
24 46 1
24 56 1
25 62 1
25 46 1
25 39 1
26 54 1
26 46 1
26 60 1
27 46 1
27 60 1
27 47 1
28 41 1
28 56 1
28 48 1
29 55 1
29 49 1
29 38 1
30 63 1
30 54 1
30 61 1
31 64 1
31 55 1
31 37 1
32 58 1
32 37 1
32 59 1
33 65 1
34 65 1
35 65 1
36 65 1
37 65 1
38 65 1
39 65 1
40 65 1
41 65 1
42 65 1
43 65 1
44 65 1
45 65 1
46 65 1
47 65 1
48 65 1
49 65 1
50 65 1
51 65 1
52 65 1
53 65 1
54 65 1
55 65 1
56 65 1
57 65 1
58 65 1
59 65 1
60 65 1
61 65 1
62 65 1
63 65 1
64 65 1
;
end;
