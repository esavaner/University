param n, integer, >= 1; #

set V, default {0..n-1}; #

set E, within V cross V;

param capacity{(i,j) in E}, >= 0;

param source, symbolic, in V, default 0;

param sink, symbolic, in V, != source, default n-1;

var flow{(i,j) in E}, >= 0, <= capacity[i,j];

var maxFlow, >= 0;

s.t. condition_1{i in V: i<>source and i<>sink}:
   sum{(j,i) in E} flow[j,i] = sum{(i,j) in E} flow[i,j];
   
s.t. condition_2{i in V: i=source}:
   maxFlow = sum{(i,j) in E} flow[i,j];
   
s.t. condition_3{i in V: i=sink}:
   maxFlow = sum{(j,i) in E} flow[j,i] ;

maximize obj: maxFlow;

solve;

printf "Maximum flow: %s\n", maxFlow;

data;
param n := 66;
param : E :   capacity :=
0 1 1
0 2 1
0 3 1
0 4 1
0 5 1
0 6 1
0 7 1
0 8 1
0 9 1
0 10 1
0 11 1
0 12 1
0 13 1
0 14 1
0 15 1
0 16 1
0 17 1
0 18 1
0 19 1
0 20 1
0 21 1
0 22 1
0 23 1
0 24 1
0 25 1
0 26 1
0 27 1
0 28 1
0 29 1
0 30 1
0 31 1
0 32 1
1 38 1
1 58 1
1 64 1
1 47 1
1 43 1
2 34 1
2 38 1
2 57 1
2 40 1
2 58 1
3 54 1
3 63 1
3 44 1
3 61 1
3 46 1
4 55 1
4 44 1
4 41 1
4 52 1
4 62 1
5 47 1
5 34 1
5 52 1
5 46 1
5 35 1
6 53 1
6 41 1
6 51 1
6 42 1
6 60 1
7 61 1
7 54 1
7 48 1
7 36 1
7 62 1
8 36 1
8 55 1
8 37 1
8 43 1
8 46 1
9 50 1
9 39 1
9 41 1
9 57 1
9 45 1
10 56 1
10 51 1
10 48 1
10 64 1
10 41 1
11 37 1
11 50 1
11 46 1
11 62 1
11 47 1
12 37 1
12 51 1
12 47 1
12 42 1
12 45 1
13 39 1
13 35 1
13 48 1
13 33 1
13 43 1
14 56 1
14 37 1
14 35 1
14 58 1
14 55 1
15 64 1
15 59 1
15 42 1
15 58 1
15 56 1
16 51 1
16 60 1
16 33 1
16 47 1
16 57 1
17 34 1
17 46 1
17 35 1
17 52 1
17 53 1
18 57 1
18 52 1
18 58 1
18 61 1
18 35 1
19 45 1
19 60 1
19 57 1
19 37 1
19 42 1
20 48 1
20 58 1
20 36 1
20 38 1
20 44 1
21 40 1
21 59 1
21 53 1
21 42 1
21 45 1
22 57 1
22 47 1
22 34 1
22 58 1
22 50 1
23 40 1
23 43 1
23 51 1
23 48 1
23 61 1
24 40 1
24 46 1
24 63 1
24 60 1
24 33 1
25 63 1
25 54 1
25 33 1
25 38 1
25 50 1
26 33 1
26 36 1
26 53 1
26 38 1
26 41 1
27 51 1
27 36 1
27 35 1
27 64 1
27 52 1
28 51 1
28 34 1
28 40 1
28 43 1
28 46 1
29 37 1
29 42 1
29 64 1
29 43 1
29 52 1
30 38 1
30 60 1
30 45 1
30 36 1
30 42 1
31 54 1
31 48 1
31 38 1
31 61 1
31 36 1
32 51 1
32 57 1
32 44 1
32 53 1
32 61 1
33 65 1
34 65 1
35 65 1
36 65 1
37 65 1
38 65 1
39 65 1
40 65 1
41 65 1
42 65 1
43 65 1
44 65 1
45 65 1
46 65 1
47 65 1
48 65 1
49 65 1
50 65 1
51 65 1
52 65 1
53 65 1
54 65 1
55 65 1
56 65 1
57 65 1
58 65 1
59 65 1
60 65 1
61 65 1
62 65 1
63 65 1
64 65 1
;
end;
